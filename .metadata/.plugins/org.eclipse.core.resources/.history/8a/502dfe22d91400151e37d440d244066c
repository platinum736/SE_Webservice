package com.iiitb.tr.workflow.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.iiitb.tr.workflow.util.ConnectionPool;

public class WorkflowDaoImpl1 implements WorkflowDao {

	private static final String assignReviewer = "Insert into reviewer_task (TrID,UserID) values(?,?)";

	@Override
	public ArrayList<JSONObject> getAllUsers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public UserVo authenticateUser(String authToken) {
		// TODO Auto-generated method stub
		return null;
	}

	public JSONObject getComments(int UserId, String userRole, int TrID) {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		JSONObject result = null;
		JSONObject mainObject = null;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select CommentID,UserID,CommentDesc,CommentDate from doc_review d "
							+ "join comment c on d.DocRevID=c.DocRevID"
							+ " where TrID=?");
			pstmt.setInt(1, TrID);
			rs = pstmt.executeQuery();
			mainObject = new JSONObject();
			while (rs.next()) {
				result = new JSONObject();
				result.put("CommentID", rs.getInt("CommentID"));
				result.put("UserId", rs.getInt("UserID"));
				result.put("Comment Desc", rs.getString("CommentDesc"));
				result.put("Comment Date", rs.getDate("CommentDate"));
				mainObject.accumulate("Comments", result);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (rs != null)
					rs.close();

				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return mainObject;
	}

	public String postComment(int userId, String userRole,
			JSONObject requestBody) {
		// TODO Auto-generated method stub
		int TrID = 0;
		String CommentDesc = null;
		try {
			TrID = requestBody.getInt("TrID");
			CommentDesc = requestBody.getString("CommentDesc");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (isReviewer(userId, TrID)) {

			Connection conn = null;
			PreparedStatement pstmt = null;
			PreparedStatement preparedStatement = null;
			PreparedStatement update = null;
			PreparedStatement select = null;
			PreparedStatement changeState = null, changeReviewerCommentState = null;
			ResultSet rs = null;
			ResultSet rs1 = null;
			int DocRevID = 0;
			int message = 0;
			try {
				conn = ConnectionPool.getConnection();
				pstmt = conn
						.prepareStatement("select DocRevID from doc_review where TrID=? and UserID=?");
				pstmt.setInt(1, TrID);
				pstmt.setInt(2, userId);
				rs = pstmt.executeQuery();

				while (rs.next()) {
					DocRevID = rs.getInt(1);
				}
				preparedStatement = conn
						.prepareStatement("Insert into comment (CommentDesc,CommentDate,DocRevID)"
								+ "values(?,?,?)");
				preparedStatement.setString(1, CommentDesc);
				java.util.Date today = new java.util.Date();
				preparedStatement.setTimestamp(2,
						new java.sql.Timestamp(today.getTime()));
				preparedStatement.setInt(3, DocRevID);
				message = preparedStatement.executeUpdate();

				/*
				 * Change the state of document assigned to a reviewer to
				 * Reviewed state after he posts comment
				 */
				changeReviewerCommentState = conn
						.prepareStatement("Update doc_review set StateID=3 where DocRevID=?");
				changeReviewerCommentState.setInt(1, DocRevID);
				changeReviewerCommentState.executeUpdate();

				/*
				 * Message=1 mean 1 row inserted into the table comment In this
				 * case need to decrement current count in trdocument table
				 */

				if (message == 1) {

					update = conn
							.prepareStatement("update trdocument set CurrentCount=CurrentCount-1 "
									+ "where TrID=1 and CurrentCount>0;");
					update.executeUpdate();

					select = conn
							.prepareStatement("Select CurrentCount from trdocument where TrID=?");
					select.setInt(1, TrID);
					rs1 = select.executeQuery();
					int CurrentCount = 0;
					while (rs1.next()) {
						CurrentCount = rs1.getInt("CurrentCount");
					}
					if (CurrentCount == 0) {
						/*
						 * Change state of document
						 */

						changeState = conn
								.prepareStatement("Update trdocument set StateID=3 where TrID=?");
						changeState.setInt(1, TrID);
						changeState.executeUpdate();
					}

				}

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {

				try {
					if (rs != null)
						rs.close();

					if (rs1 != null)
						rs1.close();

					if (pstmt != null)
						pstmt.close();

					if (preparedStatement != null)
						preparedStatement.close();

					if (changeReviewerCommentState != null)
						changeReviewerCommentState.close();

					if (update != null)
						update.close();

					if (select != null)
						select.close();

					if (changeState != null)
						changeState.close();

					if (conn != null)
						conn.close();

				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

			return (message + " Comment Posted");
		}

		else {
			return ("Comments can be posted only by Reviewer of TR Document");
		}
	}

	private boolean isReviewer(int userId, int trID) {
		// TODO Auto-generated method stub

		/*
		 * Check if userId is one of the Reviewer of trId
		 */

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select count(*) from doc_review where TrID=? and UserID=?");
			pstmt.setInt(1, trID);
			pstmt.setInt(2, userId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (rs != null)
					rs.close();

				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (count > 0) {
			return (true);
		}

		return (false);

	}

	public String deleteComment(int userId, String role, int commentId) {
		// TODO Auto-generated method stub

		Connection conn = null;
		PreparedStatement pstmt = null;
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		int RevID = 0;
		int message = 0;
		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select UserID from doc_review where DocRevID="
							+ "(select DocRevID from comment where CommentID=?)");
			pstmt.setInt(1, commentId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				RevID = rs.getInt(1);
			}

			if (RevID == 0) {
				return ("Comment does not exist");
			}

			if (RevID != userId && role.equalsIgnoreCase("Normal")) {
				return ("Cannot delete comment for other reviewer");
			}

			preparedStatement = conn
					.prepareStatement("Delete from comment where CommentID=?");
			preparedStatement.setInt(1, commentId);
			message = preparedStatement.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (rs != null)
					rs.close();

				if (pstmt != null)
					pstmt.close();

				if (preparedStatement != null)
					preparedStatement.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return (message + " Comment Deleted");
	}

	private boolean checkifAuthor(int trId, int userId, int userId2) {
		/*
		 * Check if userId1 is one of the author of trId userId2 is admin's Id
		 */
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select count(*) from doc_auth where TrID=? and UserID=?");
			pstmt.setInt(1, trId);
			pstmt.setInt(2, userId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (rs != null)
					rs.close();

				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (count > 0) {
			return (true);
		}

		return (false);
	}

	public String addReviewer(int trId, int userId, int userId2) {
		// TODO Auto-generated method stub
		if (checkifAuthor(trId, userId, userId2)) {
			return ("Cannot assign One of the Authors as Reviewer");
		}

		Connection conn = null;
		PreparedStatement pstmt = null;
		int rs = 0;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn.prepareStatement(assignReviewer);
			pstmt.setInt(1, trId);
			pstmt.setInt(2, userId);
			rs = pstmt.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			/*
			 * If same TR is being assigned to same UserID more than once It
			 * would result in a Unique Constraint violation in reviewer_task
			 * table
			 */

			return ("Work already allocated to the Reviewer");
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return "Reviewer Assignment Successfull";
	}

	public String getReviewers(int trId) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		JSONObject result = new JSONObject();

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("Select UserName from doc_review d,User u where TrID=? and d.UserID=u.UserID");
			pstmt.setInt(1, trId);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				try {
					result.accumulate("Reviewer Name", rs.getString("UserName"));
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return result.toString();
	}

	public String deleteReviewer(int TrID, int RevID) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		int result = 0;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("Delete from doc_review where TrID=? and UserID=?");
			pstmt.setInt(1, TrID);
			pstmt.setInt(2, RevID);
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (result == 0)
			return "ERROR:Could not remove Reviewer";
		else if (result > 0)
			return "Reviewer removed Successfully";
		return null;
	}

	public String acceptTask(int userId, int trId) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt1 = null;
		//PreparedStatement pstmt2 = null;
		//PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		int rs;
		int rs1;
		int rs4;
		if(ishisTask(userId,trId))
		{

		try {
			conn = ConnectionPool.getConnection();
			
			pstmt = conn
					.prepareStatement("update trdocument set ReviewerCount=ReviewerCount+1, "
							+ "CurrentCount=CurrentCount+1 where trId=?");
			pstmt.setInt(1, trId);
			rs = pstmt.executeUpdate();

			pstmt1 = conn
					.prepareStatement("Insert into doc_review (StateID,UserID,TrID) values(2,?,?)");
			pstmt1.setInt(1, userId);
			pstmt1.setInt(2, trId);
			rs1 = pstmt1.executeUpdate();

			/*
			 * pstmt3=conn.prepareStatement(
			 * "select RevTaskID from doc_review where ");
			 * pstmt3.setInt(1,userId); pstmt3.setInt(2, trId);
			 * rs1=pstmt3.executeUpdate();
			 * 
			 * pstmt2=conn.prepareStatement(
			 * "Insert into notification_review_task StateID,UserID,TrID values(2,?,?)"
			 * ); pstmt2.setInt(1,userId); pstmt2.setInt(2, trId);
			 * rs1=pstmt1.executeUpdate();
			 */

			pstmt4 = conn.prepareStatement("Delete from reviewer_task where TrID=? and UserID=?");
			pstmt4.setInt(1, trId);
			pstmt4.setInt(2, userId);
			rs4 = pstmt4.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return("Already assigned task");
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

				if (pstmt1 != null)
					pstmt1.close();
				
				if (pstmt4 != null)
					pstmt1.close();
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return "Task Accepted";
		}
		
		else
			return "The specified trdocument not assigned to you"; 
	}

	private boolean ishisTask(int userId, int trId) {
		// TODO Auto-generated method stub
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select count(*) from reviewer_task where UserID=? and TrID=?");
			pstmt.setInt(1, userId);
			pstmt.setInt(2, trId);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				int count=rs.getInt(1);
				if(count==0)
					return false;
				else
					return true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

				if (rs != null)
					rs.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}


		return false;
	}

	public String showTasks(int userId) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt1 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		JSONObject result = new JSONObject();

		try {
			conn = ConnectionPool.getConnection();
			pstmt = conn
					.prepareStatement("select t.TrID,Description from doc_review d join trdocument t"
							+ " on(t.TrID=d.TrID) where UserID=? and d.StateID=2");
			pstmt.setInt(1, userId);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				try {
					JSONObject results = new JSONObject();
					results.put("TrID", rs.getInt("t.TrID"));
					results.put("Description", rs.getString("Description"));
					results.put("Status", "Review Pending");
					result.accumulate("Tasks", results);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

			pstmt1 = conn
					.prepareStatement("select t.TrID,Description from reviewer_task r join trdocument t"
							+ " on(t.TrID=r.TrID) where UserID=?");
			pstmt1.setInt(1, userId);
			rs1 = pstmt1.executeQuery();
			while (rs1.next()) {
				try {
					JSONObject results = new JSONObject();
					results.put("TrID", rs1.getInt("t.TrID"));
					results.put("Description", rs1.getString("Description"));
					results.put("Status", "Acceptance Pending");
					result.accumulate("Tasks", results);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();

				if (pstmt1 != null)
					pstmt1.close();

				if (rs != null)
					rs.close();

				if (rs1 != null)
					rs1.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return result.toString();
	}
	
	
	public String rejectTask(int userId, int trId) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		int rs;
		int rs1;
		int rs4;

		try {
			conn = ConnectionPool.getConnection();
			
			/*
			 * pstmt3=conn.prepareStatement(
			 * "select RevTaskID from doc_review where ");
			 * pstmt3.setInt(1,userId); pstmt3.setInt(2, trId);
			 * rs1=pstmt3.executeUpdate();
			 * 
			 * pstmt2=conn.prepareStatement(
			 * "Insert into notification_review_task StateID,UserID,TrID values(2,?,?)"
			 * ); pstmt2.setInt(1,userId); pstmt2.setInt(2, trId);
			 * rs1=pstmt1.executeUpdate();
			 */

			pstmt4 = conn.prepareStatement("Delete from reviewer_task where TrID=? and UserID=?");
			pstmt4.setInt(1, trId);
			pstmt4.setInt(2, userId);
			rs4 = pstmt4.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			try {
				if (pstmt != null)
					pstmt.close();

				if (conn != null)
					conn.close();
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return "Task Rejected";

	}

}
